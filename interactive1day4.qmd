---
title: "Week2Day4interactive"
format: html
editor: visual
---

```{r}
library(tidyverse)
```

# Interactive Session 1

## Functions

```{r}
#verb then descriptor with arguments you want to expect
double_value <- function( my_dollars) {
  print(2 * my_dollars)
}

double_value(my_dollars = 10.13)
```

```{r}
double_value(10.13)
```

```{r}
#giving argument and R doesnt know what it is 
double_value(my_dollars = 10.13, 5)
```

```{r}
monthly_income <- c(42.50, 61.75, 89.50)

double_value(monthly_income)
```

```{r}
double_value2 <- function(dollars) {
  dollars * 2
}
#print is only show me this nothing stored, return statement is store this so i can use this later
double_value2(dollars =10) * 0.08
```

```{r}
#stores it
tax_double <- double_value2(dollars =10) * 0.08
```

### Create a function that returns an awesome restaurant name given a cool animal and your favorite food

```{r}
#descriptive verb and non verb, animal and food are arguments, value into single string and printed 
name_restaraunt <- function(animal, food) {
  print(paste0(animal, food))
}
#if wanna use again create a function 
name_restaraunt(animal = "hawk", food = "pizza")

```

## given temperature in degrees Fahrenheit write a function that converts it to celsius

```{r}

convert_celsius <- function(f_temp, c_temp) {
  print((f_temp - 32) * (5 / 9))
}
```

```{r}
convert_celsius(f_temp =52)
```

## Create a function given inputs age and home town returns I am this many years old and I'm from this home town

```{r}
return_agehome <- function(age, hometown) {
  print(paste("I am", age, "years old and I'm from", hometown,"."))
}

return_agehome(age = 6, hometown = "Los Angeles")git chec
```

## More functions

creating a subset within a function, return something based on that subset, dataframe of dogs favorite food

```{r}
#2 columns
dog_choice <- data.frame(dog_name = c("khora", "teddy", "waffle", "banjo", "tally"),
                         food = c("everything", "salmon", "pancakes", "chicken", "enchilladas"))

#function pulling info from that, duer gives function a dog name should return the string this dogs favorite food is 


```

```{r}
#subset only including dog name user puts in , only incldue dog names matches string wher einput user inputs dog name
dog_menu <- function(enter_dog_name) {
  my_subset <- filter(dog_choice, dog_name == enter_dog_name) #if dog name is banjo only thing kept is banjo with his info
  print(paste("My name is", my_subset$dog_name, "and my favorite food is",
              my_subset$food))
}

#my_subset only keep row and dog choice if, person enters khora filter job looks through all rows and if condition is met azdn returns true row is kept and if not row is excluded 
#given enter_dog_name first use subset that only stores row for that subset would only return waffle, pull info from existing row in subset
```

```{r}
#filtering dataframe eto single row
dog_menu(enter_dog_name = "waffle")

```

```{r}
#beside waffle, banjo.... get error message 

```

## Function that contains a for loop

\[\] dataframe with column anes

```{r}
#function with any dataframe if all variables are numeric tell me all the means, fucntion tierates over all columnsa dn calcualtes mean values stores them and then prints output of mean value in statement mean value in this column name is this, create iteration

dataframe_means <- function(df) {
  for (i in seq_along(df)) {
    col_mean <- mean(df[[i]], na.rm = TRUE)
    column_name <- colnames(df[i])
    print(paste("The mean value of", column_name, "is", col_mean))
  } #one to wahtever numebr of columns in dataframe  [[]] jsut for vector of values gives vector of values in column from some df we feed it , for each column calculate mean value for mean values and accessing column name for each column im on, jsut makinga. function nto giving it a real data set just using it so ou can place a name
}
```

```{r}
dataframe_means(df = mtcars) #now can use this function nforn any dataframe 
```

```{r}
dataframe_means(faithful)
#can use for any dataframe!!!!
```

## Error messages

Create function to calculate betz limit

modor radius: meters

air density: kg/m\^3

power: watts

```{r}
calculate_betz_windpower <- function(air_density, rotor_radius, wind_velocity) {
  
  if (wind_velocity > 130) {
    warning("Whoa, thats a pretty high windspeed. Are you sure?") 
  }
  if(rotor_radius < 0) {
    stop("rotor radius must be a positive value (meters)")
  }
  0.3 * air_density * pi * ((rotor_radius)^2) * ((wind_velocity)^3)
}

```

```{r}
calculate_betz_windpower(air_density = 1.2, rotor_radius = 30, wind_velocity = 50)
```

```{r}
calculate_betz_windpower(air_density = 1, rotor_radius = 20, wind_velocity = 1020)

```

```{r}
calculate_betz_windpower(air_density = 1, rotor_radius = -10, wind_velocity = 1020)

```

```{r}

```
